{"version":3,"sources":["../src/index.js"],"names":["createSegmentAnalytics","blacklistActions","blacklistKeys","identifyAction","identifySchemaID","trackingLib","type","identify","track"],"mappings":"oEAAA,kCAQMA,uBAAyB,WAAU,CACvC,MAAO,kBAAS,mBAAQ,YAAU,CAChC,IADgC,OAQ5B,8BAR4B,KAG9BC,gBAH8B,KAI9BC,aAJ8B,KAK9BC,cAL8B,KAM9BC,gBAN8B,KAO9BC,WAP8B,CAUhC,GAAI,2BAA8B,EAAOC,IAArC,CAAJ,CAAgD,CAC9C,GAAM,GAAU,0BAAhB,CACM,EAAe,0BADrB,CAEA,OAAQ,EAAOA,IAAf,EACE,OACE,EAAYC,QAAZ,CACE,uBADF,GADF,CAKE,MACF,QAPF,CAUA,EAAYC,KAAZ,CAAkB,EAAOF,IAAzB,GACD,CACF,CAzBe,CAAT,CA0BR,CAnCD,C,gBAqCeN,sB","file":"index.js","sourcesContent":["import {\n  onBlackList,\n  removeType,\n  omitDeep,\n  getID,\n  generateConfig\n} from './helpers'\n\nconst createSegmentAnalytics = config => {\n  return store => next => action => {\n    next(action)\n    const {\n      blacklistActions,\n      blacklistKeys,\n      identifyAction,\n      identifySchemaID,\n      trackingLib\n    } = generateConfig(config)\n\n    if (onBlackList(blacklistActions, action.type)) {\n      const payload = removeType(action)\n      const cleanPayload = omitDeep(payload, blacklistKeys)\n      switch (action.type) {\n        case identifyAction:\n          trackingLib.identify(\n            getID(cleanPayload, identifySchemaID),\n            cleanPayload\n          )\n          break\n        default:\n          break\n      }\n      trackingLib.track(action.type, cleanPayload)\n    }\n  }\n}\n\nexport default createSegmentAnalytics\n"]}